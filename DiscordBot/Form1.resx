<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAO309QDs8/QC7/b3FPD3+DHv9vcp6/LzAe309QAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADt8/QA7PP0Au/29yvw9vcw7/b3E+zy8wHt8/QAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAO309QDp7/AB7/b3LfD3+I3x+PnR8fj57/H4+dzw9/g78vn6AOfu
        7gAAAAAAAAAAAAAAAAAAAAAA6fDxAPL5+gDw9/hC8fj54PH4+e7x+PnQ8Pf4iu/29yrj6eoA7PP0AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADu9PUA6/HyAvD3+Fvx+Pnf8fj5//H4+f/x+Pn98fj50+/2
        91/v9vcj8Pf4S/D3+Gzw9/h+8Pf4gfD3+HLw9/hU7/b3Le/292Hx+PnL8fj5+/H4+f/x+Pn/8fj53fD3
        +Ffs8/QC7/X2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPH4+QDv9vdF8fj57PH4+f/x+Pn/8fj59vD3
        +Knw9/h+8fj5sPH4+ePx+Pn58fj5//H4+f/x+Pn/8fj5//H4+fzx+Pnq8fj5u/D3+IPw9/ig8fj58vH4
        +f/x+Pn/8fj56vD3+EHw9/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8vn6APD3+G7x+Pn/8fj5//H4
        +f/w9/ji8fj50/H4+fnx+Pn/8fj5//H4+f/x+Pn/8fj5//H4+f/x+Pn/8fj5//H4+f/x+Pn/8fj5/PH4
        +dnw9/je8fj5//H4+f/x+Pn/8Pf4afH4+QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADx+PkA8Pf4YvH4
        +f/x+Pn/8fj5//H4+f7x+Pn/8fj5+/H4+b3x+PmZ8fj52fH4+f/x+Pn/8fj5//H4+f7x+PnK8Pf4l/H4
        +czx+Pn+8fj5//H4+f7x+Pn/8fj5//H4+f7w9/hd8fj5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPH4
        +QDw9/hN8fj5+vH4+f/x+Pn/8fj5//H4+f/w9/it7vX2EfL5+gDw9/g28fj54fH4+f/x+Pn/8fj5xu/2
        9x7y+foA7/b3IvH4+c3x+Pn/8fj5//H4+f/x+Pn/8fj5+fD3+Ejw9/gAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA8Pf4APD29zLx+Pnu8fj5//H4+f/x+Pn/8fj5//D3+GHx+PkA7PP0AOrx8gTx9/it8fj5//H4
        +f/w9/iC8/r7AOju7wD1/P0A8ff4jfH4+f/x+Pn/8fj5//H4+f/x+Pns8Pb3LvD3+AAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADv9vcA7/b3GPH4+dbx+Pn/8fj5//H4+f/x+Pn/8Pf4efT7/QDu9fYA7vX2DvH4
        +cDx+Pn/8fj5//D3+Jrn7u8C7vT1AOzy8wTx+Pmk8fj5//H4+f/x+Pn/8fj5//H4+dPv9vcV7/b3AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAO309QDs8vME8ff4rfH4+f/x+Pn/8fj5//H4+f/x+Pne8Pf4V/D3
        +C7w9/iH8fj5+PH4+f/x+Pn/8fj57fD3+G3w9/gs8Pf4b/H4+e/x+Pn/8fj5//H4+f/x+Pn/8ff4qOvx
        8gPt8/QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5ezsAPL5+wDw9/hz8fj5//H4+f/x+Pn/8fj5//H4
        +f/x+Pn48fj51vD3+KHw9/jH8fj5//H4+f7w9/ix8Pf4rfH4+d/x+Pn88fj5//H4+f/x+Pn/8fj5//H4
        +f/w9/hu8vn6AOXr7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Pf4APD3+Dbx+Pnu8fj5//H4
        +f/x+Pn/8fj56fD3+Jjv9vdw8Pf4nPH4+enx+Pn/8fj5//D3+Nrv9veM7/b3cvD3+K3x+Pn28fj5//H4
        +f/x+Pn/8fj57PD3+DPw9/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADu9fYA7vX2C/H4
        +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
        ////x////4D///8A////Af///+P////n//8=
</value>
  </data>
</root>